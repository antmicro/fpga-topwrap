//--------------------------------------------------------------------------------
// Auto-generated by Migen (7014bdc) & LiteX (73795257) on 2021-03-18 13:06:11
//--------------------------------------------------------------------------------
module litex_pwm(
	input wire sys_clk,
	input wire sys_rst,
	output reg pwm,
	input wire axi_awvalid,
	output wire axi_awready,
	input wire [31:0] axi_awaddr,
	input wire axi_wvalid,
	output wire axi_wready,
	input wire [31:0] axi_wdata,
	input wire [3:0] axi_wstrb,
	input wire axi_bvalid,
	input wire axi_bready,
	output wire [1:0] axi_bresp,
	input wire axi_arvalid,
	output wire axi_arready,
	input wire [31:0] axi_araddr,
	input wire axi_rvalid,
	input wire axi_rready,
	output wire [1:0] axi_rresp,
	output wire [31:0] axi_rdata
);

wire sys_clk_1;
wire sys_rst_1;
wire por_clk;
reg int_rst = 1'd1;
wire enable;
wire [31:0] width;
wire [31:0] period;
reg [31:0] counter = 32'd0;
reg enable_storage = 1'd0;
reg enable_re = 1'd0;
reg [31:0] width_storage = 32'd0;
reg width_re = 1'd0;
reg [31:0] period_storage = 32'd0;
reg period_re = 1'd0;
reg aw_valid = 1'd0;
reg aw_ready = 1'd0;
wire [31:0] aw_payload_addr;
reg w_valid = 1'd0;
reg w_ready = 1'd0;
wire [31:0] w_payload_data;
wire [3:0] w_payload_strb;
reg b_valid = 1'd0;
wire b_ready;
reg [1:0] b_payload_resp = 2'd0;
reg ar_valid = 1'd0;
reg ar_ready = 1'd0;
wire [31:0] ar_payload_addr;
reg r_valid = 1'd0;
wire r_ready;
reg [1:0] r_payload_resp = 2'd0;
reg [31:0] r_payload_data = 32'd0;
reg [29:0] wb_bus_adr = 30'd0;
reg [31:0] wb_bus_dat_w = 32'd0;
wire [31:0] wb_bus_dat_r;
reg [3:0] wb_bus_sel = 4'd0;
reg wb_bus_cyc = 1'd0;
reg wb_bus_stb = 1'd0;
wire wb_bus_ack;
reg wb_bus_we = 1'd0;
reg [2:0] wb_bus_cti = 3'd0;
reg [1:0] wb_bus_bte = 2'd0;
wire wb_bus_err;
reg [31:0] data = 32'd0;
wire [31:0] r_addr;
wire [31:0] w_addr;
reg last_ar_aw_n = 1'd0;
reg [2:0] subfragments_state = 3'd0;
reg [2:0] subfragments_next_state = 3'd0;
reg last_ar_aw_n_next_value0 = 1'd0;
reg last_ar_aw_n_next_value_ce0 = 1'd0;
reg [31:0] data_next_value1 = 32'd0;
reg data_next_value_ce1 = 1'd0;
reg [13:0] litexcore_litexcore_adr = 14'd0;
reg litexcore_litexcore_we = 1'd0;
reg [7:0] litexcore_litexcore_dat_w = 8'd0;
wire [7:0] litexcore_litexcore_dat_r;
wire [29:0] litexcore_litexcore_wishbone_adr;
wire [31:0] litexcore_litexcore_wishbone_dat_w;
reg [31:0] litexcore_litexcore_wishbone_dat_r = 32'd0;
wire [3:0] litexcore_litexcore_wishbone_sel;
wire litexcore_litexcore_wishbone_cyc;
wire litexcore_litexcore_wishbone_stb;
reg litexcore_litexcore_wishbone_ack = 1'd0;
wire litexcore_litexcore_wishbone_we;
wire [2:0] litexcore_litexcore_wishbone_cti;
wire [1:0] litexcore_litexcore_wishbone_bte;
reg litexcore_litexcore_wishbone_err = 1'd0;
wire [13:0] litexcore_bank_bus_adr;
wire litexcore_bank_bus_we;
wire [7:0] litexcore_bank_bus_dat_w;
reg [7:0] litexcore_bank_bus_dat_r = 8'd0;
wire litexcore_enable0_re;
wire litexcore_enable0_r;
wire litexcore_enable0_we;
wire litexcore_enable0_w;
wire litexcore_width3_re;
wire [7:0] litexcore_width3_r;
wire litexcore_width3_we;
wire [7:0] litexcore_width3_w;
wire litexcore_width2_re;
wire [7:0] litexcore_width2_r;
wire litexcore_width2_we;
wire [7:0] litexcore_width2_w;
wire litexcore_width1_re;
wire [7:0] litexcore_width1_r;
wire litexcore_width1_we;
wire [7:0] litexcore_width1_w;
wire litexcore_width0_re;
wire [7:0] litexcore_width0_r;
wire litexcore_width0_we;
wire [7:0] litexcore_width0_w;
wire litexcore_period3_re;
wire [7:0] litexcore_period3_r;
wire litexcore_period3_we;
wire [7:0] litexcore_period3_w;
wire litexcore_period2_re;
wire [7:0] litexcore_period2_r;
wire litexcore_period2_we;
wire [7:0] litexcore_period2_w;
wire litexcore_period1_re;
wire [7:0] litexcore_period1_r;
wire litexcore_period1_we;
wire [7:0] litexcore_period1_w;
wire litexcore_period0_re;
wire [7:0] litexcore_period0_r;
wire litexcore_period0_we;
wire [7:0] litexcore_period0_w;
wire litexcore_sel;
wire [13:0] litexcore_csr_interconnect_adr;
wire litexcore_csr_interconnect_we;
wire [7:0] litexcore_csr_interconnect_dat_w;
wire [7:0] litexcore_csr_interconnect_dat_r;
reg litexcore_state = 1'd0;
reg litexcore_next_state = 1'd0;

assign aw_payload_addr = axi_awaddr;
assign axi_awready = aw_ready;
assign w_payload_data = axi_wdata;
assign w_payload_strb = axi_wstrb;
assign axi_wready = w_ready;
assign axi_bresp = b_payload_resp;
assign b_ready = axi_bready;
assign ar_payload_addr = axi_araddr;
assign axi_arready = ar_ready;
assign axi_rresp = r_payload_resp;
assign axi_rdata = r_payload_data;
assign r_ready = axi_rready;
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst_1 = int_rst;
assign r_addr = (ar_payload_addr - 1'd0);
assign w_addr = (aw_payload_addr - 1'd0);
always @(*) begin
	subfragments_next_state <= 3'd0;
	w_ready <= 1'd0;
	last_ar_aw_n_next_value0 <= 1'd0;
	last_ar_aw_n_next_value_ce0 <= 1'd0;
	b_valid <= 1'd0;
	b_payload_resp <= 2'd0;
	data_next_value1 <= 32'd0;
	data_next_value_ce1 <= 1'd0;
	ar_ready <= 1'd0;
	r_valid <= 1'd0;
	r_payload_resp <= 2'd0;
	r_payload_data <= 32'd0;
	wb_bus_adr <= 30'd0;
	wb_bus_dat_w <= 32'd0;
	wb_bus_sel <= 4'd0;
	wb_bus_cyc <= 1'd0;
	wb_bus_stb <= 1'd0;
	aw_ready <= 1'd0;
	wb_bus_we <= 1'd0;
	subfragments_next_state <= subfragments_state;
	case (subfragments_state)
		1'd1: begin
			wb_bus_stb <= 1'd1;
			wb_bus_cyc <= 1'd1;
			wb_bus_adr <= r_addr[31:2];
			wb_bus_sel <= 4'd15;
			if (wb_bus_ack) begin
				ar_ready <= 1'd1;
				data_next_value1 <= wb_bus_dat_r;
				data_next_value_ce1 <= 1'd1;
				subfragments_next_state <= 2'd2;
			end
		end
		2'd2: begin
			r_valid <= 1'd1;
			r_payload_resp <= 1'd0;
			r_payload_data <= data;
			if (r_ready) begin
				subfragments_next_state <= 1'd0;
			end
		end
		2'd3: begin
			wb_bus_stb <= w_valid;
			wb_bus_cyc <= w_valid;
			wb_bus_we <= 1'd1;
			wb_bus_adr <= w_addr[31:2];
			wb_bus_sel <= w_payload_strb;
			wb_bus_dat_w <= w_payload_data;
			if (wb_bus_ack) begin
				aw_ready <= 1'd1;
				w_ready <= 1'd1;
				subfragments_next_state <= 3'd4;
			end
		end
		3'd4: begin
			b_valid <= 1'd1;
			b_payload_resp <= 1'd0;
			if (b_ready) begin
				subfragments_next_state <= 1'd0;
			end
		end
		default: begin
			if ((ar_valid & aw_valid)) begin
				if (last_ar_aw_n) begin
					last_ar_aw_n_next_value0 <= 1'd0;
					last_ar_aw_n_next_value_ce0 <= 1'd1;
					subfragments_next_state <= 2'd3;
				end else begin
					last_ar_aw_n_next_value0 <= 1'd1;
					last_ar_aw_n_next_value_ce0 <= 1'd1;
					subfragments_next_state <= 1'd1;
				end
			end else begin
				if (ar_valid) begin
					last_ar_aw_n_next_value0 <= 1'd1;
					last_ar_aw_n_next_value_ce0 <= 1'd1;
					subfragments_next_state <= 1'd1;
				end else begin
					if (aw_valid) begin
						last_ar_aw_n_next_value0 <= 1'd0;
						last_ar_aw_n_next_value_ce0 <= 1'd1;
						subfragments_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	litexcore_litexcore_dat_w <= 8'd0;
	litexcore_litexcore_wishbone_dat_r <= 32'd0;
	litexcore_next_state <= 1'd0;
	litexcore_litexcore_adr <= 14'd0;
	litexcore_litexcore_we <= 1'd0;
	litexcore_litexcore_wishbone_ack <= 1'd0;
	litexcore_next_state <= litexcore_state;
	case (litexcore_state)
		1'd1: begin
			litexcore_litexcore_wishbone_ack <= 1'd1;
			litexcore_litexcore_wishbone_dat_r <= litexcore_litexcore_dat_r;
			litexcore_next_state <= 1'd0;
		end
		default: begin
			litexcore_litexcore_dat_w <= litexcore_litexcore_wishbone_dat_w;
			if ((litexcore_litexcore_wishbone_cyc & litexcore_litexcore_wishbone_stb)) begin
				litexcore_litexcore_adr <= litexcore_litexcore_wishbone_adr;
				litexcore_litexcore_we <= (litexcore_litexcore_wishbone_we & (litexcore_litexcore_wishbone_sel != 1'd0));
				litexcore_next_state <= 1'd1;
			end
		end
	endcase
end
assign litexcore_litexcore_wishbone_adr = wb_bus_adr;
assign litexcore_litexcore_wishbone_dat_w = wb_bus_dat_w;
assign wb_bus_dat_r = litexcore_litexcore_wishbone_dat_r;
assign litexcore_litexcore_wishbone_sel = wb_bus_sel;
assign litexcore_litexcore_wishbone_cyc = wb_bus_cyc;
assign litexcore_litexcore_wishbone_stb = wb_bus_stb;
assign wb_bus_ack = litexcore_litexcore_wishbone_ack;
assign litexcore_litexcore_wishbone_we = wb_bus_we;
assign litexcore_litexcore_wishbone_cti = wb_bus_cti;
assign litexcore_litexcore_wishbone_bte = wb_bus_bte;
assign wb_bus_err = litexcore_litexcore_wishbone_err;
assign litexcore_sel = (litexcore_bank_bus_adr[13:9] == 1'd0);
assign litexcore_enable0_r = litexcore_bank_bus_dat_w[0];
assign litexcore_enable0_re = ((litexcore_sel & litexcore_bank_bus_we) & (litexcore_bank_bus_adr[3:0] == 1'd0));
assign litexcore_enable0_we = ((litexcore_sel & (~litexcore_bank_bus_we)) & (litexcore_bank_bus_adr[3:0] == 1'd0));
assign litexcore_width3_r = litexcore_bank_bus_dat_w[7:0];
assign litexcore_width3_re = ((litexcore_sel & litexcore_bank_bus_we) & (litexcore_bank_bus_adr[3:0] == 1'd1));
assign litexcore_width3_we = ((litexcore_sel & (~litexcore_bank_bus_we)) & (litexcore_bank_bus_adr[3:0] == 1'd1));
assign litexcore_width2_r = litexcore_bank_bus_dat_w[7:0];
assign litexcore_width2_re = ((litexcore_sel & litexcore_bank_bus_we) & (litexcore_bank_bus_adr[3:0] == 2'd2));
assign litexcore_width2_we = ((litexcore_sel & (~litexcore_bank_bus_we)) & (litexcore_bank_bus_adr[3:0] == 2'd2));
assign litexcore_width1_r = litexcore_bank_bus_dat_w[7:0];
assign litexcore_width1_re = ((litexcore_sel & litexcore_bank_bus_we) & (litexcore_bank_bus_adr[3:0] == 2'd3));
assign litexcore_width1_we = ((litexcore_sel & (~litexcore_bank_bus_we)) & (litexcore_bank_bus_adr[3:0] == 2'd3));
assign litexcore_width0_r = litexcore_bank_bus_dat_w[7:0];
assign litexcore_width0_re = ((litexcore_sel & litexcore_bank_bus_we) & (litexcore_bank_bus_adr[3:0] == 3'd4));
assign litexcore_width0_we = ((litexcore_sel & (~litexcore_bank_bus_we)) & (litexcore_bank_bus_adr[3:0] == 3'd4));
assign litexcore_period3_r = litexcore_bank_bus_dat_w[7:0];
assign litexcore_period3_re = ((litexcore_sel & litexcore_bank_bus_we) & (litexcore_bank_bus_adr[3:0] == 3'd5));
assign litexcore_period3_we = ((litexcore_sel & (~litexcore_bank_bus_we)) & (litexcore_bank_bus_adr[3:0] == 3'd5));
assign litexcore_period2_r = litexcore_bank_bus_dat_w[7:0];
assign litexcore_period2_re = ((litexcore_sel & litexcore_bank_bus_we) & (litexcore_bank_bus_adr[3:0] == 3'd6));
assign litexcore_period2_we = ((litexcore_sel & (~litexcore_bank_bus_we)) & (litexcore_bank_bus_adr[3:0] == 3'd6));
assign litexcore_period1_r = litexcore_bank_bus_dat_w[7:0];
assign litexcore_period1_re = ((litexcore_sel & litexcore_bank_bus_we) & (litexcore_bank_bus_adr[3:0] == 3'd7));
assign litexcore_period1_we = ((litexcore_sel & (~litexcore_bank_bus_we)) & (litexcore_bank_bus_adr[3:0] == 3'd7));
assign litexcore_period0_r = litexcore_bank_bus_dat_w[7:0];
assign litexcore_period0_re = ((litexcore_sel & litexcore_bank_bus_we) & (litexcore_bank_bus_adr[3:0] == 4'd8));
assign litexcore_period0_we = ((litexcore_sel & (~litexcore_bank_bus_we)) & (litexcore_bank_bus_adr[3:0] == 4'd8));
assign litexcore_enable0_w = enable_storage;
assign litexcore_width3_w = width_storage[31:24];
assign litexcore_width2_w = width_storage[23:16];
assign litexcore_width1_w = width_storage[15:8];
assign litexcore_width0_w = width_storage[7:0];
assign litexcore_period3_w = period_storage[31:24];
assign litexcore_period2_w = period_storage[23:16];
assign litexcore_period1_w = period_storage[15:8];
assign litexcore_period0_w = period_storage[7:0];
assign litexcore_csr_interconnect_adr = litexcore_litexcore_adr;
assign litexcore_csr_interconnect_we = litexcore_litexcore_we;
assign litexcore_csr_interconnect_dat_w = litexcore_litexcore_dat_w;
assign litexcore_litexcore_dat_r = litexcore_csr_interconnect_dat_r;
assign litexcore_bank_bus_adr = litexcore_csr_interconnect_adr;
assign litexcore_bank_bus_we = litexcore_csr_interconnect_we;
assign litexcore_bank_bus_dat_w = litexcore_csr_interconnect_dat_w;
assign litexcore_csr_interconnect_dat_r = litexcore_bank_bus_dat_r;
assign enable = enable_storage;
assign width = width_storage;
assign period = period_storage;

always @(posedge por_clk) begin
	int_rst <= sys_rst;
end

always @(posedge sys_clk_1) begin
	if (enable) begin
		counter <= (counter + 1'd1);
		if ((counter < width)) begin
			pwm <= 1'd1;
		end else begin
			pwm <= 1'd0;
		end
		if ((counter >= (period - 1'd1))) begin
			counter <= 1'd0;
		end
	end else begin
		counter <= 1'd0;
		pwm <= 1'd0;
	end
	subfragments_state <= subfragments_next_state;
	if (last_ar_aw_n_next_value_ce0) begin
		last_ar_aw_n <= last_ar_aw_n_next_value0;
	end
	if (data_next_value_ce1) begin
		data <= data_next_value1;
	end
	litexcore_state <= litexcore_next_state;
	litexcore_bank_bus_dat_r <= 1'd0;
	if (litexcore_sel) begin
		case (litexcore_bank_bus_adr[3:0])
			1'd0: begin
				litexcore_bank_bus_dat_r <= litexcore_enable0_w;
			end
			1'd1: begin
				litexcore_bank_bus_dat_r <= litexcore_width3_w;
			end
			2'd2: begin
				litexcore_bank_bus_dat_r <= litexcore_width2_w;
			end
			2'd3: begin
				litexcore_bank_bus_dat_r <= litexcore_width1_w;
			end
			3'd4: begin
				litexcore_bank_bus_dat_r <= litexcore_width0_w;
			end
			3'd5: begin
				litexcore_bank_bus_dat_r <= litexcore_period3_w;
			end
			3'd6: begin
				litexcore_bank_bus_dat_r <= litexcore_period2_w;
			end
			3'd7: begin
				litexcore_bank_bus_dat_r <= litexcore_period1_w;
			end
			4'd8: begin
				litexcore_bank_bus_dat_r <= litexcore_period0_w;
			end
		endcase
	end
	if (litexcore_enable0_re) begin
		enable_storage <= litexcore_enable0_r;
	end
	enable_re <= litexcore_enable0_re;
	if (litexcore_width3_re) begin
		width_storage[31:24] <= litexcore_width3_r;
	end
	if (litexcore_width2_re) begin
		width_storage[23:16] <= litexcore_width2_r;
	end
	if (litexcore_width1_re) begin
		width_storage[15:8] <= litexcore_width1_r;
	end
	if (litexcore_width0_re) begin
		width_storage[7:0] <= litexcore_width0_r;
	end
	width_re <= litexcore_width0_re;
	if (litexcore_period3_re) begin
		period_storage[31:24] <= litexcore_period3_r;
	end
	if (litexcore_period2_re) begin
		period_storage[23:16] <= litexcore_period2_r;
	end
	if (litexcore_period1_re) begin
		period_storage[15:8] <= litexcore_period1_r;
	end
	if (litexcore_period0_re) begin
		period_storage[7:0] <= litexcore_period0_r;
	end
	period_re <= litexcore_period0_re;
	if (sys_rst_1) begin
		pwm <= 1'd0;
		enable_storage <= 1'd0;
		enable_re <= 1'd0;
		width_re <= 1'd0;
		period_re <= 1'd0;
		data <= 32'd0;
		last_ar_aw_n <= 1'd0;
		subfragments_state <= 3'd0;
		litexcore_state <= 1'd0;
	end
end

endmodule
